{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/Status.js","pomodoro/Duration.js","pomodoro/TimerControls.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Status","session","focusDuration","breakDuration","data-testid","label","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","Duration","breakMinus","breakPlus","focusMinus","focusPlus","type","onClick","disabled","TimerControls","isTimerRunning","handleStop","playPause","aria-label","title","oi","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ed1bbdc.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction Status({ session, focusDuration, breakDuration }) {\r\n\r\n\r\n\treturn (\r\n\t\tsession && (\r\n\t\t\t<>\r\n\t\t\t\t{/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n\t\t\t\t<div className=\"row mb-2\">\r\n\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t{/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n\t\t\t\t\t\t<h2 data-testid=\"session-title\">\r\n\t\t\t\t\t\t\t{session?.label} for{\" \"}\r\n\t\t\t\t\t\t\t{session?.label === \"Focusing\" ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration)}{\" \"}\r\n\t\t\t\t\t\t\tminutes\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t{/* TODO: Update message below correctly format the time remaining in the current session */}\r\n\t\t\t\t\t\t<p className=\"lead\" data-testid=\"session-sub-title\">\r\n\t\t\t\t\t\t\t{secondsToDuration(session?.timeRemaining)} remaining\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row mb-2\">\r\n\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t<div className=\"progress\" style={{ height: \"20px\" }}>\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName=\"progress-bar\"\r\n\t\t\t\t\t\t\t\trole=\"progressbar\"\r\n\t\t\t\t\t\t\t\taria-valuemin=\"0\"\r\n\t\t\t\t\t\t\t\taria-valuemax=\"100\"\r\n\t\t\t\t\t\t\t\taria-valuenow={100 - (100 * session.timeRemaining) / (session.label === \"Focusing\" ? focusDuration * 60 : breakDuration * 60)} // TODO: Increase aria-valuenow as elapsed time increases\r\n\t\t\t\t\t\t\t\tstyle={{ width: `${100 - (100 * session.timeRemaining) / (session.label === \"Focusing\" ? focusDuration * 60 : breakDuration * 60)}%`}} // TODO: Increase width % as elapsed time increases\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t)\r\n\t);\r\n}\r\nexport default  Status;","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction Duration({\r\n\tsession,\r\n\tfocusDuration,\r\n\tbreakDuration,\r\n\tbreakMinus,\r\n\tbreakPlus,\r\n\tfocusMinus,\r\n\tfocusPlus,\r\n}) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<div className=\"input-group input-group-lg mb-2\">\r\n\t\t\t\t\t\t<span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n\t\t\t\t\t\t\t{/* TODO: Update this text to display the current focus session duration */}\r\n\t\t\t\t\t\t\tFocus Duration: {minutesToDuration(focusDuration)}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t\t{/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\t\tdata-testid=\"decrease-focus\"\r\n\t\t\t\t\t\t\t\tonClick={focusMinus}\r\n\t\t\t\t\t\t\t\tdisabled={focusDuration === 5 || session?.label}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<span className=\"oi oi-minus\" />\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t{/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\t\tdata-testid=\"increase-focus\"\r\n\t\t\t\t\t\t\t\tonClick={focusPlus}\r\n\t\t\t\t\t\t\t\tdisabled={focusDuration === 60 || session?.label}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<span className=\"oi oi-plus\" />\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<div className=\"float-right\">\r\n\t\t\t\t\t\t<div className=\"input-group input-group-lg mb-2\">\r\n\t\t\t\t\t\t\t<span className=\"input-group-text\" data-testid=\"duration-break\">\r\n\t\t\t\t\t\t\t\t{/* TODO: Update this text to display the current break session duration */}\r\n\t\t\t\t\t\t\t\tBreak Duration: {minutesToDuration(breakDuration)}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t\t\t{/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\t\t\tdata-testid=\"decrease-break\"\r\n\t\t\t\t\t\t\t\t\tonClick={breakMinus}\r\n\t\t\t\t\t\t\t\t\tdisabled={breakDuration === 1 || session?.label}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<span className=\"oi oi-minus\" />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t{/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\t\t\tdata-testid=\"increase-break\"\r\n\t\t\t\t\t\t\t\t\tonClick={breakPlus}\r\n\t\t\t\t\t\t\t\t\tdisabled={breakDuration === 15 || session?.label}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<span className=\"oi oi-plus\" />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Duration;","import React from \"react\";\r\n\r\nfunction TimerControls({ session, isTimerRunning, handleStop, playPause, classNames }) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"btn-group btn-group-lg mb-2\"\r\n\t\t\t\t\t\trole=\"group\"\r\n\t\t\t\t\t\taria-label=\"Timer controls\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\r\n\t\t\t\t\t\t\tdata-testid=\"play-pause\"\r\n\t\t\t\t\t\t\ttitle=\"Start or pause timer\"\r\n\t\t\t\t\t\t\tonClick={playPause}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclassName={classNames({\r\n\t\t\t\t\t\t\t\t\toi: true,\r\n\t\t\t\t\t\t\t\t\t\"oi-media-play\": !isTimerRunning,\r\n\t\t\t\t\t\t\t\t\t\"oi-media-pause\": isTimerRunning,\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t{/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\r\n\t\t\t\t\t\t{/* TODO: Disable the stop button when there is no active session */}\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\t\tdata-testid=\"stop\"\r\n\t\t\t\t\t\t\ttitle=\"Stop the session\"\r\n\t\t\t\t\t\t\tonClick={handleStop}\r\n\t\t\t\t\t\t\tdisabled={!session}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span className=\"oi oi-media-stop\" />\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default TimerControls;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Status from \"./Status.js\";\nimport Duration from \"./Duration\";\nimport TimerControls from \"./TimerControls\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n\tconst timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n\treturn {\n\t\t...prevState,\n\t\ttimeRemaining,\n\t};\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n\t/**\n\t * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n\t */\n\treturn (currentSession) => {\n\t\tif (currentSession.label === \"Focusing\") {\n\t\t\treturn {\n\t\t\t\tlabel: \"On Break\",\n\t\t\t\ttimeRemaining: breakDuration * 60,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tlabel: \"Focusing\",\n\t\t\ttimeRemaining: focusDuration * 60,\n\t\t};\n\t};\n}\n\nfunction Pomodoro() {\n\t// Timer starts out paused\n\tconst [isTimerRunning, setIsTimerRunning] = useState(false);\n\t// The current session - null where there is no session running\n\tconst [session, setSession] = useState(null);\n\n\t// ToDo: Allow the user to adjust the focus and break duration.\n\tconst [focusDuration, setFocusDuration] = useState(25);\n\tconst [breakDuration, setBreakDuration] = useState(5);\n\n  const focusMinus = () => {\n    setFocusDuration( focusDuration - 5);\n\t};\n\n\tconst focusPlus = () => {\n\t\tsetFocusDuration(focusDuration + 5);\n\t};\n\n\tconst breakMinus = () => {\n\t\tsetBreakDuration( breakDuration - 1);\n\t};\n\n\tconst breakPlus = () => {\n    setBreakDuration( breakDuration + 1);\n\t};\n\n\tconst handleStop = () => {\n\t\tsetSession(null);\n\t\tsetIsTimerRunning(false);\n\t};\n\n\t/**\n\t * Custom hook that invokes the callback function every second\n\t *\n\t * NOTE: You will not need to make changes to the callback function\n\t */\n\tuseInterval(\n\t\t() => {\n\t\t\tif (session.timeRemaining === 0) {\n\t\t\t\tnew Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n\t\t\t\treturn setSession(nextSession(focusDuration, breakDuration));\n\t\t\t}\n\t\t\treturn setSession(nextTick);\n\t\t},\n\t\tisTimerRunning ? 1000 : null\n\t);\n\n\t/**\n\t * Called whenever the play/pause button is clicked.\n\t */\n\tfunction playPause() {\n\t\tsetIsTimerRunning((prevState) => {\n\t\t\tconst nextState = !prevState;\n\t\t\tif (nextState) {\n\t\t\t\tsetSession((prevStateSession) => {\n\t\t\t\t\t// If the timer is starting and the previous session is null,\n\t\t\t\t\t// start a focusing session.\n\t\t\t\t\tif (prevStateSession === null) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlabel: \"Focusing\",\n\t\t\t\t\t\t\ttimeRemaining: focusDuration * 60,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn prevStateSession;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn nextState;\n\t\t});\n\t}\n\n\t\n\n\n\n\treturn (\n\t\t<div className=\"pomodoro\">\n\t\t\t<Duration\n\t\t\t\tsession={session}\n\t\t\t\tfocusDuration={focusDuration}\n\t\t\t\tbreakDuration={breakDuration}\n\t\t\t\tbreakMinus={breakMinus}\n\t\t\t\tbreakPlus={breakPlus}\n\t\t\t\tfocusMinus={focusMinus}\n\t\t\t\tfocusPlus={focusPlus}\n\t\t\t/>\n\t\t\t<TimerControls\n\t\t\t\tsession={session}\n\t\t\t\tisTimerRunning={isTimerRunning}\n\t\t\t\thandleStop={handleStop}\n        playPause={playPause}\n        classNames={classNames}\n\t\t\t/>\n\t\t\t<Status\n\t\t\t\tsession={session}\n\t\t\t\tfocusDuration={focusDuration}\n\t\t\t\tbreakDuration={breakDuration}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Pomodoro;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}